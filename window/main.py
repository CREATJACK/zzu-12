# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import datetime
import os
import smtplib
from email.header import Header
from email.mime.text import MIMEText
from email.utils import formataddr

from PyQt5 import QtCore, QtGui, QtWidgets

import window
from window import entryUser, modify


import time
from email.header import decode_header
import poplib
from email.parser import Parser
from email.utils import parseaddr
from bs4 import BeautifulSoup

class Ui_Main(object):
    def __init__(self):
        # 1代表当前在收件箱， -1代表在垃圾箱
        self.current = 1
        # self.good代表非垃圾邮件的路径集合，self.bad代表垃圾邮件的路径集合
        self.good = []
        self.bad = []

    def setupUi(self, Main):
        Main.setObjectName("Main")
        Main.resize(1031, 719)
        self.label = QtWidgets.QLabel(Main)
        self.label.setGeometry(QtCore.QRect(60, 20, 91, 81))
        self.label.setText("")
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(Main)
        self.label_2.setGeometry(QtCore.QRect(170, 20, 461, 81))
        self.label_2.setText("")
        self.label_2.setScaledContents(True)
        self.label_2.setObjectName("label_2")
        self.pushButton = QtWidgets.QPushButton(Main)
        self.pushButton.setGeometry(QtCore.QRect(840, 20, 141, 81))
        self.pushButton.setStyleSheet("QPushButton{\n"
                                      "       text-decoration:none;  \n"
                                      "    background:#05B8CC;\n"
                                      "    color:#f2f2f2;    \n"
                                      "    font-size:20px;  \n"
                                      "    font-family: 微软雅黑,宋体,Arial,Helvetica,Verdana,sans-serif;  \n"
                                      "    font-weight:bold; \n"
                                      "    border-radius:3px;\n"
                                      "}\n"
                                      "QPushButton::pressed{ background: #3C79F2; border-color: #11505C; font-weight: bold; font-family:Microsoft YaHei; }")
        self.pushButton.setCheckable(False)
        self.pushButton.setAutoExclusive(False)
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(Main)
        self.pushButton_2.setGeometry(QtCore.QRect(50, 130, 93, 61))
        self.pushButton_2.setStyleSheet("QPushButton{\n"
                                        "       text-decoration:none;  \n"
                                        "    background:#05B8CC;\n"
                                        "    color:#f2f2f2;    \n"
                                        "    font-size:20px;  \n"
                                        "    font-family: 微软雅黑,宋体,Arial,Helvetica,Verdana,sans-serif;  \n"
                                        "    font-weight:bold; \n"
                                        "    border-radius:3px;\n"
                                        "}\n"
                                        "QPushButton::pressed{ background: #3C79F2; border-color: #11505C; font-weight: bold; font-family:Microsoft YaHei; }")
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(Main)
        self.pushButton_3.setGeometry(QtCore.QRect(50, 220, 93, 61))
        self.pushButton_3.setStyleSheet("QPushButton{\n"
                                        "       text-decoration:none;  \n"
                                        "    background:#05B8CC;\n"
                                        "    color:#f2f2f2;    \n"
                                        "    font-size:20px;  \n"
                                        "    font-family: 微软雅黑,宋体,Arial,Helvetica,Verdana,sans-serif;  \n"
                                        "    font-weight:bold; \n"
                                        "    border-radius:3px;\n"
                                        "}\n"
                                        "QPushButton::pressed{ background: #3C79F2; border-color: #11505C; font-weight: bold; font-family:Microsoft YaHei; }")
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(Main)
        self.pushButton_4.setGeometry(QtCore.QRect(50, 310, 93, 51))
        self.pushButton_4.setStyleSheet("QPushButton{\n"
                                        "       text-decoration:none;  \n"
                                        "    background:#05B8CC;\n"
                                        "    color:#f2f2f2;    \n"
                                        "    font-size:20px;  \n"
                                        "    font-family: 微软雅黑,宋体,Arial,Helvetica,Verdana,sans-serif;  \n"
                                        "    font-weight:bold; \n"
                                        "    border-radius:3px;\n"
                                        "}\n"
                                        "QPushButton::pressed{ background: #3C79F2; border-color: #11505C; font-weight: bold; font-family:Microsoft YaHei; }")
        self.pushButton_4.setObjectName("pushButton_4")
        self.verticalLayoutWidget = QtWidgets.QWidget(Main)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(170, 130, 811, 551))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.stackedWidget = QtWidgets.QStackedWidget(self.verticalLayoutWidget)
        self.stackedWidget.setObjectName("stackedWidget")
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")
        self.listWidget = QtWidgets.QListWidget(self.page)
        self.listWidget.setGeometry(QtCore.QRect(0, 0, 811, 461))
        self.listWidget.setObjectName("listWidget")
        self.pushButton_11 = QtWidgets.QPushButton(self.page)
        self.pushButton_11.setGeometry(QtCore.QRect(680, 470, 121, 61))
        self.pushButton_11.setStyleSheet("QPushButton{\n"
                                         "       text-decoration:none;  \n"
                                         "    background:#05B8CC;\n"
                                         "    color:#f2f2f2;    \n"
                                         "    font-size:20px;  \n"
                                         "    font-family: 微软雅黑,宋体,Arial,Helvetica,Verdana,sans-serif;  \n"
                                         "    font-weight:bold; \n"
                                         "    border-radius:3px;\n"
                                         "}\n"
                                         "QPushButton::pressed{ background: #3C79F2; border-color: #11505C; font-weight: bold; font-family:Microsoft YaHei; }")
        self.pushButton_11.setObjectName("pushButton_11")
        self.stackedWidget.addWidget(self.page)
        self.page_3 = QtWidgets.QWidget()
        self.page_3.setObjectName("page_3")
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.page_3)
        self.plainTextEdit.setGeometry(QtCore.QRect(10, 100, 781, 441))
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.formLayoutWidget = QtWidgets.QWidget(self.page_3)
        self.formLayoutWidget.setGeometry(QtCore.QRect(10, 0, 361, 91))
        self.formLayoutWidget.setObjectName("formLayoutWidget")
        self.formLayout = QtWidgets.QFormLayout(self.formLayoutWidget)
        self.formLayout.setContentsMargins(0, 0, 0, 0)
        self.formLayout.setObjectName("formLayout")
        self.label_3 = QtWidgets.QLabel(self.formLayoutWidget)
        self.label_3.setObjectName("label_3")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label_3)
        self.lineEdit = QtWidgets.QLineEdit(self.formLayoutWidget)
        self.lineEdit.setObjectName("lineEdit")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.lineEdit)
        self.label_4 = QtWidgets.QLabel(self.formLayoutWidget)
        self.label_4.setObjectName("label_4")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.label_4)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.formLayoutWidget)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.lineEdit_2)
        self.label_5 = QtWidgets.QLabel(self.formLayoutWidget)
        self.label_5.setObjectName("label_5")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.label_5)
        self.lineEdit_3 = QtWidgets.QLineEdit(self.formLayoutWidget)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.lineEdit_3)
        self.pushButton_6 = QtWidgets.QPushButton(self.page_3)
        self.pushButton_6.setGeometry(QtCore.QRect(700, 60, 93, 28))
        self.pushButton_6.setStyleSheet("QPushButton{\n"
                                        "       text-decoration:none;  \n"
                                        "    background:#05B8CC;\n"
                                        "    color:#f2f2f2;    \n"
                                        "    font-size:20px;  \n"
                                        "    font-family: 微软雅黑,宋体,Arial,Helvetica,Verdana,sans-serif;  \n"
                                        "    font-weight:bold; \n"
                                        "    border-radius:3px;\n"
                                        "}\n"
                                        "QPushButton::pressed{ background: #3C79F2; border-color: #11505C; font-weight: bold; font-family:Microsoft YaHei; }")
        self.pushButton_6.setObjectName("pushButton_6")
        self.stackedWidget.addWidget(self.page_3)
        self.page_4 = QtWidgets.QWidget()
        self.page_4.setObjectName("page_4")
        self.textBrowser_2 = QtWidgets.QTextBrowser(self.page_4)
        self.textBrowser_2.setGeometry(QtCore.QRect(0, 0, 801, 431))
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.pushButton_9 = QtWidgets.QPushButton(self.page_4)
        self.pushButton_9.setGeometry(QtCore.QRect(500, 450, 141, 71))
        self.pushButton_9.setStyleSheet("QPushButton{\n"
                                        "       text-decoration:none;  \n"
                                        "    background:#05B8CC;\n"
                                        "    color:#f2f2f2;    \n"
                                        "    font-size:20px;  \n"
                                        "    font-family: 微软雅黑,宋体,Arial,Helvetica,Verdana,sans-serif;  \n"
                                        "    font-weight:bold; \n"
                                        "    border-radius:3px;\n"
                                        "}\n"
                                        "QPushButton::pressed{ background: #3C79F2; border-color: #11505C; font-weight: bold; font-family:Microsoft YaHei; }")
        self.pushButton_9.setObjectName("pushButton_9")
        self.pushButton_10 = QtWidgets.QPushButton(self.page_4)
        self.pushButton_10.setGeometry(QtCore.QRect(660, 450, 141, 71))
        self.pushButton_10.setStyleSheet("QPushButton{\n"
                                         "       text-decoration:none;  \n"
                                         "    background:#05B8CC;\n"
                                         "    color:#f2f2f2;    \n"
                                         "    font-size:20px;  \n"
                                         "    font-family: 微软雅黑,宋体,Arial,Helvetica,Verdana,sans-serif;  \n"
                                         "    font-weight:bold; \n"
                                         "    border-radius:3px;\n"
                                         "}\n"
                                         "QPushButton::pressed{ background: #3C79F2; border-color: #11505C; font-weight: bold; font-family:Microsoft YaHei; }")
        self.pushButton_10.setObjectName("pushButton_10")
        self.stackedWidget.addWidget(self.page_4)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.textBrowser = QtWidgets.QTextBrowser(self.page_2)
        self.textBrowser.setGeometry(QtCore.QRect(-5, 1, 811, 411))
        self.textBrowser.setObjectName("textBrowser")
        self.pushButton_7 = QtWidgets.QPushButton(self.page_2)
        self.pushButton_7.setGeometry(QtCore.QRect(500, 440, 141, 71))
        self.pushButton_7.setStyleSheet("QPushButton{\n"
                                        "       text-decoration:none;  \n"
                                        "    background:#05B8CC;\n"
                                        "    color:#f2f2f2;    \n"
                                        "    font-size:20px;  \n"
                                        "    font-family: 微软雅黑,宋体,Arial,Helvetica,Verdana,sans-serif;  \n"
                                        "    font-weight:bold; \n"
                                        "    border-radius:3px;\n"
                                        "}\n"
                                        "QPushButton::pressed{ background: #3C79F2; border-color: #11505C; font-weight: bold; font-family:Microsoft YaHei; }")
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_8 = QtWidgets.QPushButton(self.page_2)
        self.pushButton_8.setGeometry(QtCore.QRect(660, 440, 131, 71))
        self.pushButton_8.setStyleSheet("QPushButton{\n"
                                        "       text-decoration:none;  \n"
                                        "    background:#05B8CC;\n"
                                        "    color:#f2f2f2;    \n"
                                        "    font-size:20px;  \n"
                                        "    font-family: 微软雅黑,宋体,Arial,Helvetica,Verdana,sans-serif;  \n"
                                        "    font-weight:bold; \n"
                                        "    border-radius:3px;\n"
                                        "}\n"
                                        "QPushButton::pressed{ background: #3C79F2; border-color: #11505C; font-weight: bold; font-family:Microsoft YaHei; }")
        self.pushButton_8.setObjectName("pushButton_8")
        self.stackedWidget.addWidget(self.page_2)
        self.verticalLayout.addWidget(self.stackedWidget)
        self.pushButton_5 = QtWidgets.QPushButton(Main)
        self.pushButton_5.setGeometry(QtCore.QRect(670, 20, 151, 81))
        self.pushButton_5.setStyleSheet("QPushButton{\n"
                                        "       text-decoration:none;  \n"
                                        "    background:#05B8CC;\n"
                                        "    color:#f2f2f2;    \n"
                                        "    font-size:20px;  \n"
                                        "    font-family: 微软雅黑,宋体,Arial,Helvetica,Verdana,sans-serif;  \n"
                                        "    font-weight:bold; \n"
                                        "    border-radius:3px;\n"
                                        "}\n"
                                        "QPushButton::pressed{ background: #3C79F2; border-color: #11505C; font-weight: bold; font-family:Microsoft YaHei; }")
        self.pushButton_5.setObjectName("pushButton_5")

        face = QtGui.QPixmap("./personal/face.png")
        self.label.setPixmap(face)
        self.label_2.setText("当前用户: " + window.id)
        Main.setStyleSheet("background-color: white")
        Main.PB1 = self.PB1
        Main.pB2 = self.PB2
        Main.pB3 = self.PB3
        Main.pB4 = self.PB4
        Main.pB5 = self.PB5
        Main.pB6 = self.PB6
        Main.pB7 = self.PB7
        Main.pB8 = self.PB8
        Main.pB9 = self.PB9
        Main.pB10 = self.PB10
        Main.pB11 = self.PB11

        # 如果存放邮件的目录不存在，先建立目录
        if not os.path.exists('./file/email/' + window.id):
            os.mkdir('./file/email/'+window.id)

        # 判断距离上次读取的间隔是否大于12小时
        if os.path.exists('./personal/last.txt'):
            f = open('./peronal/last.txt', 'r')
            last = eval(f.readline())
            print(last)
            now = time.time()
            if((now-last)/3600>12):
                self.getEmail()
        else:
            f = open('./personal/last.txt', 'w')
            now = time.time()
            f.write(str(now))
            f.flush()
            f.close()
            self.getEmail()

        # 进行垃圾邮件分类


        # 初始化self.good和self.bad
        # self.initGood()
        # self.initBad()

        self.retranslateUi(Main)
        self.stackedWidget.setCurrentIndex(0)
        self.pushButton_2.clicked.connect(Main.pB2)
        self.pushButton_3.clicked.connect(Main.pB3)
        self.pushButton_4.clicked.connect(Main.pB4)
        self.pushButton.clicked.connect(Main.PB1)
        self.pushButton_5.clicked.connect(Main.pB5)
        self.pushButton_6.clicked.connect(Main.pB6)
        self.pushButton_9.clicked.connect(Main.pB9)
        self.pushButton_10.clicked.connect(Main.pB10)
        self.pushButton_7.clicked.connect(Main.pB7)
        self.pushButton_8.clicked.connect(Main.pB8)
        self.pushButton_11.clicked.connect(Main.pB11)
        self.listWidget.doubleClicked.connect(self.listView)

        QtCore.QMetaObject.connectSlotsByName(Main)

    def retranslateUi(self, Main):
        _translate = QtCore.QCoreApplication.translate
        Main.setWindowTitle(_translate("Main", "Form"))
        self.pushButton.setText(_translate("Main", "修改个人资料"))
        self.pushButton_2.setText(_translate("Main", "收件箱"))
        self.pushButton_3.setText(_translate("Main", "垃圾箱"))
        self.pushButton_4.setText(_translate("Main", "写邮件"))
        self.pushButton_11.setText(_translate("Main", "手动收取"))
        self.label_3.setText(_translate("Main", "收件人"))
        self.label_4.setText(_translate("Main", "发件昵称"))
        self.label_5.setText(_translate("Main", "邮件主题"))
        self.pushButton_6.setText(_translate("Main", "发送"))
        self.pushButton_9.setText(_translate("Main", "移到收件箱"))
        self.pushButton_10.setText(_translate("Main", "返回"))
        self.pushButton_7.setText(_translate("Main", "移到垃圾箱"))
        self.pushButton_8.setText(_translate("Main", "返回"))
        self.pushButton_5.setText(_translate("Main", "录入人脸信息"))

    # listView双击事件
    def listView(self, e):
        b = self.listWidget.selectedIndexes()
        target = b[0].row()
        print("运行到了这里")
        print(target)
        print(self.good[target])
        f = open(self.good[target])
        content = f.read()
        print("运行到了这里")
        self.textBrowser.setText(content)
        self.stackedWidget.setCurrentIndex(2)

    # 修改个人信息槽函数
    def PB1(self):
        self.dialog = QtWidgets.QDialog()
        d_ui = modify.Ui_Dialog()
        d_ui.setupUi(self.dialog)
        self.dialog.father = self
        self.dialog.show()

    # 收件箱槽函数
    def PB2(self):
        self.stackedWidget.setCurrentIndex(0)
        # 加载前先删除上一次列出的数据
        count = self.listWidget.count()
        for i in range(count):
            item = self.listWidget.takeItem(0)
            self.listWidget.removeItemWidget(item)
        formation = []
        for f in self.good:
            fin = open(f, 'r', encoding="utf-8")
            content = fin.read(30)
            formation.append(content)
        self.listWidget.addItems(formation)

    # 初始化self.good
    def initGood(self):
        # 非垃圾邮件的目录
        goodPath = "./file/email/" + window.id + "/good/"
        fileList = os.listdir(goodPath)
        for x in fileList:
            print(goodPath+x)
            self.good.append(goodPath+x)

    # 初始化self.bad
    def initBad(self):
        # 垃圾邮件的目录
        badPath = "./file/email/" + window.id + "/bad/"
        fileList = os.listdir(badPath)
        for x in fileList:
            self.bad.append(badPath+x)


    # 垃圾箱槽函数
    def PB3(self):
        self.stackedWidget.setCurrentIndex(0)

    # 写邮件槽函数
    def PB4(self):
        self.stackedWidget.setCurrentIndex(1)

    # 录入人脸信息槽函数
    def PB5(self):
        self.dialog = QtWidgets.QDialog()
        d_ui = entryUser.Ui_Dialog()
        d_ui.setupUi(self.dialog)
        self.dialog.show()

    # 发送邮件的接口
    # window.id: 发送者邮箱
    # window.password: 发送者邮箱密码
    # self.lineEdit.text(): 接收者邮箱
    # self.lineEdit_2.text(): 发送者昵称
    # self.lineEdit_3.text(): 邮件主题
    # self.plainTextEdit.toPalinText(): 发送内容
    def PB6(self):
        try:
            msg = MIMEText(self.plainTextEdit.toPlainText(), 'plain', 'utf-8')
            msg["From"] = formataddr([self.lineEdit_2.text(), window.id])
            msg["To"] = Header(self.lineEdit.text())

            msg['Subject'] = Header(self.lineEdit_3.text(), 'utf-8')
            # 发送邮件
            smtp_server = "smtp.qq.com"
            server = smtplib.SMTP_SSL(smtp_server)
            server.connect(smtp_server, 465)
            server.login(window.id, window.password)
            server.sendmail(window.id, self.lineEdit.text(), msg.as_string())
            print("邮件发送成功")
        except smtplib.SMTPException as e:
            print(f"无法发送邮件, 失败原因{e}")
        finally:
            # 关闭服务器
            server.quit()

    def PB7(self):
        pass

    def PB8(self):
        pass

    def PB9(self):
        pass

    def PB10(self):
        pass

    def PB11(self):
        pass

    # 爬取邮件的槽函数，并存放到 ./file/email/用户id 目录下
    # window.id: 发送者邮箱
    # window.password: 发送者邮箱密码
    def getEmail(self):
        user = window.id
        password = window.password
        pop3_server = 'pop.qq.com'
        # 连接到POP3服务器
        server = poplib.POP3(pop3_server)
        server.user(user)
        server.pass_(password)
        email_num, email_size = server.stat()
        print("消息的数量: {0}, 消息的总大小: {1}".format(email_num, email_size))
        # # 使用list()返回所有邮件的编号，默认为字节类型的串
        rsp, msg_list, rsp_siz = server.list()
        # 循环遍历每个邮件
        for i in range(0, len(msg_list)):
            filename = "邮件%d.txt" % i
            file = open(filename, 'w', encoding='utf-8')
            print("%d==================" % i)
            # 获取一封邮件，索引号从1开始
            index = len(msg_list) - i
            resp, lines, octets = server.retr(index)
            # lindes存储了邮件的原始文本的每一行
            # 可以获得整个邮件的原始文本
            # print(lines)
            msg_content = b'\r\n'.join(lines).decode('utf-8', 'ignore')
            # 解析出邮件：
            msg = Parser().parsestr(msg_content)
            self.print_info(msg, file)
            file.close()
        server.quit()
    # 爬邮件子函数
    def print_info(self, msg, file, indent=0):
        if indent == 0:
            for header in ['From', 'To', 'Subject', 'Date']:
                value = msg.get(header, '')
                if value:
                    if header == 'Date':
                        time3 = msg.get("Date").split('+')[0]
                        time2 = time3.split('-')[0]
                        time1 = time.strptime(time2, '%a, %d %b %Y %H:%M:%S ')
                        file.write("时间：%d年%d月%d日 %d:%d:%d\n" % (time1.tm_year, time1.tm_mon, time1.tm_mday, time1.tm_hour, time1.tm_min, time1.tm_sec))
                        break
                    elif header == 'Subject':
                        value = self.decode_str(value)
                        file.write('主题: %s\n' % value)

                    else:
                        hdr, addr = parseaddr(value)
                        name = self.decode_str(hdr)
                        value = u'%s <%s>' % (name, addr)
                        file.write('%s: %s\n' % (header, value))
        if msg.is_multipart():

            parts = msg.get_payload()
            for n, part in enumerate(parts):
                self.print_info(part, file, indent + 1)
                if part.get_content_type() == 'text/plain':
                    return

        else:
            content_type = msg.get_content_type()
            if content_type == 'text/plain':
                content = msg.get_payload(decode=True)
                charset = self.guess_charset(msg)
                if charset:
                    content = content.decode(charset)
                if "".join([s for s in content.splitlines(True) if s.strip()]):
                    file.write('Text: %s' % ("".join([s for s in content.splitlines(True) if s.strip()])))
            elif content_type == 'text/html':
                content = msg.get_payload(decode=True)
                charset = self.guess_charset(msg)
                if charset:
                    content = content.decode(charset, 'ignore')
                soup = BeautifulSoup(content, "html.parser")
                if "".join([s for s in soup.text.splitlines(True) if s.strip()]):
                    file.write(('Text: %s' % "".join([s for s in soup.text.splitlines(True) if s.strip()])))
            else:
                filename = msg.get_filename()
                if self.decode_str(filename):
                    file.write('Attachment: %s' % ( self.decode_str(filename)))
    # 爬邮件子函数
    def decode_str(self,s):
        value, charset = decode_header(s)[0]
        if charset:
            value = value.decode(charset)
        return value
    # 爬邮件子函数
    def guess_charset(self,msg):
        charset = msg.get_charset()
        if charset is None:
            content_type = msg.get('Content-Type', '').lower()
            pos = content_type.find('charset=')
            if pos >= 0:
                charset = content_type[pos + 8:].split(';')[0]
        return charset

    # 垃圾邮件识别 path是待识别文件的路径 返回-1代表是垃圾邮件，返回1代表是正常邮件
    def judgeEmail(self, path):
        pass

    # 垃圾分类  path是爬取的邮件的路径，把垃圾邮件存放到 ./file/email/用户id/spamEmail 目录下，把非垃圾邮件存放到./file/email/用户id/normalEmail 目录下
    def classifyEmail(self, path):
        pass

    # 垃圾邮件移动到收件箱中  path是垃圾邮件的路径，即把垃圾邮件存放到 ./file/email/用户id/normalEmail 目录下
    def movEmail(self, path):
        pass
